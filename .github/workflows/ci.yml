name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout main repo (with submodules)
        uses: actions/checkout@v3
        with:
          submodules: recursive
          token: ${{ secrets.SUBMODULE_TOKEN }}

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Grant execute permission to gradlew
        run: chmod +x ./gradlew

      - name: Build project without tests
        run: ./gradlew clean build -x test

      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            echo "[1] Move to project directory"
            cd ~/MJS_BACKEND || { echo "Project directory not found"; exit 1; }

            echo "[2] Stop old server if running"
            PID=$(pgrep -f 'MJS_BACKEND-0.0.1-SNAPSHOT.jar')
            if [ -n "$PID" ]; then
              kill -9 $PID
              echo "Killed process $PID"
            else
              echo "No running server found"
            fi

            echo "[3] Pull latest code"
            git reset --hard HEAD
            git clean -fd
            git pull origin main || { echo "Git pull failed"; exit 1; }

            echo "[4] Clean and build"
            ./gradlew clean
            ./gradlew build -x test || { echo "Build failed"; exit 1; }

            echo "[5] Run new JAR"
            cd build/libs
            JAR_NAME=$(ls MJS_BACKEND-*.jar | grep -v "plain" | head -n 1)
            if [ -z "$JAR_NAME" ]; then
              echo "No JAR file found"
              exit 1
            fi
            nohup java -jar $JAR_NAME > nohup.out 2>&1 &
            echo "Application started: $JAR_NAME"

            echo "[6] Show logs"
            tail -n 100 nohup.out
