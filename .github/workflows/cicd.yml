name: Deploy to EC2

on:
  push:
    branches: [ "main" ]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: 📦 Checkout
        uses: actions/checkout@v4

      - name: 🔐 SSH agent
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.EC2_SSH_KEY }}

      # 원격에서 실행할 배포 스크립트를 로컬에 생성
      - name: 📝 Create remote deploy script (locally)
        shell: bash
        run: |
          cat > deploy_remote.sh <<'EOS'
          #!/usr/bin/env bash
          set -Eeuo pipefail

          # === 고정 변수(Secrets 추가 불필요) ===
          APP_DIR="/home/ubuntu/MJS_BACKEND"
          SERVICE_NAME="MJS_BACKEND"
          APP_PORT="8080"
          JAR_NAME="MJS_BACKEND-0.0.1-SNAPSHOT.jar"
          JAR_PATH="${APP_DIR}/build/libs/${JAR_NAME}"

          log(){ printf "\n[%(%F %T)T] %s\n" -1 "$*"; }
          trap 'log "❌ 실패: 라인 $LINENO (명령: $BASH_COMMAND)"; exit 1' ERR

          log "who=$(whoami) host=$(hostname)"
          set -x

          # 0) github 호스트키 등록(첫 실행시 프롬프트 방지)
          ssh-keyscan -H github.com | sudo tee -a /etc/ssh/ssh_known_hosts > /dev/null || true

          # 1) 프로젝트 이동
          cd "${APP_DIR}"

          # 2) 메인 레포 최신화(안전: main 고정 + FF-only)
          git fetch origin
          git checkout main
          git pull --ff-only origin main

          # 3) 서브모듈 최신화 (branch=main 추적)
          #    .gitmodules: url=git@github.com:NOVA-MJU/MJS-BACK-SECURITY.git, branch=main
          git submodule sync --recursive
          git submodule update --init --recursive --remote
          git submodule foreach --recursive 'git reset --hard || true'
          git submodule foreach --recursive 'git clean -fdx || true'

          # 4) 빌드
          chmod +x ./gradlew || true
          ./gradlew --version
          ./gradlew clean bootJar -x test

          # 5) 산출물 확인
          test -f "${JAR_PATH}" || { set +x; log "❌ JAR 미존재: ${JAR_PATH}"; exit 1; }

          # 6) systemd 재시작
          sudo systemctl daemon-reload || true
          sudo systemctl restart "${SERVICE_NAME}"

          set +x
          # 7) 빠른 헬스체크 (최대 20초, 조기성공: 로그/HTTP/포트)
          alive(){ systemctl is-active --quiet "${SERVICE_NAME}"; }
          ready_by_log(){ journalctl -u "${SERVICE_NAME}" -n 200 --no-pager 2>/dev/null | grep -q "Started .* in .* seconds"; }
          ready_by_http(){ command -v curl >/dev/null 2>&1 && curl -fsS "http://127.0.0.1:${APP_PORT}/actuator/health" >/dev/null 2>&1; }
          ready_by_port(){ (command -v ss >/dev/null 2>&1 && ss -lnt | grep -q ":${APP_PORT} ") || (command -v nc >/dev/null 2>&1 && nc -z 127.0.0.1 "${APP_PORT}"); }

          log "🩺 헬스체크 시작(최대 20초)"
          for i in $(seq 1 20); do
            if ! alive; then
              log "❌ 서비스 비활성(조기 종료)"
              sudo systemctl --no-pager --full status "${SERVICE_NAME}" || true
              journalctl -u "${SERVICE_NAME}" -n 200 --no-pager || true
              exit 1
            fi
            if ready_by_log || ready_by_http || ready_by_port; then
              log "✅ 준비 완료 (~${i}s)"
              exit 0
            fi
            sleep 1
          done

          log "⚠️ 20초 내 준비 신호 미확인 — 최근 상태/로그"
          sudo systemctl --no-pager --full status "${SERVICE_NAME}" || true
          journalctl -u "${SERVICE_NAME}" -n 200 --no-pager || true
          exit 1
          EOS

          chmod +x deploy_remote.sh
          ls -al deploy_remote.sh
          head -n 20 deploy_remote.sh

      - name: 📤 Upload deploy script to EC2
        shell: bash
        run: |
          scp -o StrictHostKeyChecking=no ./deploy_remote.sh \
            "${{ secrets.EC2_USER }}"@"${{ secrets.EC2_HOST }}":/home/ubuntu/deploy_remote.sh

      - name: 🚀 Run deploy script on EC2
        shell: bash
        run: |
          ssh -o StrictHostKeyChecking=no "${{ secrets.EC2_USER }}"@"${{ secrets.EC2_HOST }}" \
            "bash /home/ubuntu/deploy_remote.sh"

      - name: 📜 Show service status & logs (always)
        if: always()
        run: |
          ssh -o StrictHostKeyChecking=no "${{ secrets.EC2_USER }}"@"${{ secrets.EC2_HOST }}" \
            "sudo systemctl --no-pager --full status MJS_BACKEND || true"
          ssh -o StrictHostKeyChecking=no "${{ secrets.EC2_USER }}"@"${{ secrets.EC2_HOST }}" \
            "journalctl -u MJS_BACKEND -n 120 --no-pager || true"
